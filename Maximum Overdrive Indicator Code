// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LvNThL

//@version=5

                                                                            //   © LvNThL    \\ 
//                                                                          \\  Description  //
//
//                                                                      Maximum Overdrive indicator
//
//                                                                                Enjoy
//
//                                                                          Mr. Storm [LvNThL]



indicator("Maximum Overdrive", "MAX", overlay = true)
import TradingView/ta/7

//MAIN
bool _3 = input.bool(true, "Show Moving Average 1?", tooltip = string("Associated with Color Fill Settings, and Short Moving Average Type"), group = "On/Off")
bool _4 = input.bool(true, "Show Moving Average 2?", tooltip = string("Associated with Color Fill Settings, and Short Moving Average Type"), group = "On/Off")
bool _5 = input.bool(true, "Show Moving Average 3?", tooltip = string("Associated with Long Moving Average Type"), group = "On/Off")
bool _darkmode = input.bool(false, "Darkmode?", group = "On/Off")

string typeMA111 = input.string("EMA", "Short Moving Average Type", ["EMA", "SMA", "RMA", "VWMA", "DEMA", "HMA", "WMA"], group = "Moving Average Type")
string typeMA11 = input.string("HMA", "Long Moving Average Type", ["EMA", "SMA", "RMA", "VWMA", "DEMA", "HMA", "WMA"], group = "Moving Average Type")

string typeMA21 = string("SMA")
int smoothingLength1 = int(9)

//MOVING AVERAGES
ma11(source, length, type) =>
    switch type
        "EMA" => ta.ema(source, length)
        "SMA" => ta.sma(source, length)
        "RMA" => ta.rma(source, length)
        "VWMA" => ta.vwma(source, length)
        "DEMA" => ta.dema(source, length)
        "HMA" => ta.hma(source, length)
        "WMA" => ta.wma(source, length)

ma111(source, length, type) =>
    switch type
        "EMA" => ta.ema(source, length)
        "SMA" => ta.sma(source, length)
        "RMA" => ta.rma(source, length)
        "VWMA" => ta.vwma(source, length)
        "DEMA" => ta.dema(source, length)
        "HMA" => ta.hma(source, length)
        "WMA" => ta.wma(source, length)

ma21(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)

_ma3 = ma111(close, input.int(50, "Moving Average Period 1", minval = 1, maxval = 4999, step = 1, group = "MA Periods"), typeMA111)
_ma4 = ma111(close, input.int(100, "Moving Average Period 2", minval = 1, maxval = 4999, step = 1, group = "MA Periods"), typeMA111)
_ma5 = ma11(close, input.int(900, "Moving Average Period 3", minval = 1, maxval = 4999, step = 1, group = "MA Periods"), typeMA11)

_smoothedma3 = ma21(_ma3, smoothingLength1, typeMA21)
_smoothedma4 = ma21(_ma4, smoothingLength1, typeMA21)
_smoothedma5 = ma21(_ma5, smoothingLength1, typeMA21)

//MA PLOTS
c = plot(_3 ? _smoothedma3 : na, "Smoothed MA 1", color = _smoothedma3 >= _smoothedma4 ? #00b000 : #b22222, linewidth = 2, style = plot.style_line)
d = plot(_4 ? _smoothedma4 : na, "Smoothed MA 2", color = _smoothedma4 >= _smoothedma3 ? _darkmode ? #ffffff : #000000 : _darkmode ? #ffffff : #000000, linewidth = 1, style = plot.style_line)
e = plot(_5 ? _smoothedma5 : na, "Smoothed MA 3", color = _darkmode ? color.rgb(255,255,255,0) : color.rgb(0,0,0,0), linewidth = 1, style = plot.style_line)
z = plot(close, display = display.none)

//COLOR FILLS
fill(c, d, _smoothedma4 > _smoothedma3 ? color(color.rgb(255, 0, 0, 75)) : color(color.rgb(0, 255, 0, 75)), "Color Fill")
